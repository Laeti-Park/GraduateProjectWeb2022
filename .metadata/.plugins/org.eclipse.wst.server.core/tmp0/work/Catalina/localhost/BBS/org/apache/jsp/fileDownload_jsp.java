/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.52
 * Generated at: 2022-05-13 15:53:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import file.FileDTO;
import file.FileDAO;
import org.apache.commons.net.ftp.*;
import java.io.File;
import java.io.*;

public final class fileDownload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("org.apache.commons.net.ftp");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("file.FileDTO");
    _jspx_imports_classes.add("file.FileDAO");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\r\n");
      out.write("서동학: 전체적인 코딩\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
request.setCharacterEncoding("UTF-8");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>파일 관리</title>\r\n");
      out.write("<style>\r\n");
      out.write("@font-face {\r\n");
      out.write("  font-family: \"aTitleGothic2\";\r\n");
      out.write("  src: url('fonts/aTitleGothic2.ttf');\r\n");
      out.write("}\r\n");
      out.write("@font-face {\r\n");
      out.write("  font-family: \"aTitleGothic3\";\r\n");
      out.write("  src: url('fonts/aTitleGothic3.ttf');\r\n");
      out.write("}\r\n");
      out.write("@font-face {\r\n");
      out.write("  font-family: \"uninote\";\r\n");
      out.write("  src: url('fonts/UNINOTE.otf');\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("	margin: 0px;\r\n");
      out.write("	background-color: #f9f9f9;\r\n");
      out.write("	padding: 10px 0px 0px 20px;\r\n");
      out.write("	font-family: aTitleGothic2;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

	String userID = null;
	if (session.getAttribute("userID") != null) {
		userID = (String) session.getAttribute("userID");
	}

	String itemID = null;
	itemID = request.getParameter("itemID");

	String mapID = null;
	mapID = request.getParameter("mapID");

	out.write("<span>" + itemID + "의 파일목록</span><br><br>");

	String directory = "upload/" + userID + "/" + itemID; //경로

	if (mapID.equals(userID)) {
		directory = "www/upload/" + userID + "/" + itemID; //경로
		// 유저의 아이디와 아이템의 아이디로 파일을 불러온다
		ArrayList<FileDTO> fileList = new FileDAO().getList(userID, itemID);

		for (FileDTO file : fileList) {
			out.write("<a href=\"downloadFileAction.jsp?directory=" + directory + "&file="
			+ java.net.URLEncoder.encode(file.getFileRealName(), "UTF-8") + "\">" + file.getFileName() + "</a>"
			+ "<span>  </span>" + "<form action='deleteFileAction.jsp' method='post' style='display: inline;'>"
			+ "<input type='text' name='itemID' style='display: none;' value='" + itemID + "'>"
			+ "<input type='text' name='fileRealName' style='display: none;' value='" + file.getFileRealName()
			+ "'>" + "<input type='hidden' name='action' value='fileDelete'>"
			+ "<input type='submit' name='delete' value='삭제'>" + "</form>" + "<br>");
		}
	} else if (!mapID.equals(userID)) { // 사용자 본인이 아니라면 다운로드만 가능
		directory = "upload/" + mapID + "/" + itemID; //경로
		ArrayList<FileDTO> fileList = new FileDAO().getList(mapID, itemID);

		for (FileDTO file : fileList) {
			out.write("<a href=\"downloadFileAction.jsp?directory=" + directory + "&file="
			+ java.net.URLEncoder.encode(file.getFileRealName(), "UTF-8") + "\">" + file.getFileName() + "</a>"
			+ "<span>  </span>" + "<form action='deleteFileAction.jsp' method='post' style='display: inline;'>"
			+ "<input type='text' name='itemID' style='display: none;' value='" + itemID + "'>"
			+ "<input type='text' name='fileRealName' style='display: none;' value='" + file.getFileRealName()
			+ "'>" + "<input type='hidden' name='action' value='fileDelete'>" + "</form>" + "<br>");
		}
	}
	if (mapID.equals(userID)) {
	
      out.write("\r\n");
      out.write("	<input type=\"button\" onclick=\"back()\" value=\"돌아가기\">\r\n");
      out.write("	");

	}
	
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		function back() {\r\n");
      out.write("			location.href = 'upload_map.jsp?itemID=");
      out.print(itemID);
      out.write("&mapID=");
      out.print(mapID);
      out.write("';\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
