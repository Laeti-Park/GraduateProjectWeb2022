/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.52
 * Generated at: 2022-05-13 14:32:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import file.FileDAO;
import java.io.File;
import java.io.PrintWriter;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;
import org.apache.commons.net.ftp.*;
import java.io.*;
import java.net.*;

public final class uploadAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	public static void deleteFile(String path) {
	      File deleteFolder = new File(path);

	      if (deleteFolder.exists()) {
	         File[] deleteFolderList = deleteFolder.listFiles();

	         for (int i = 0; i < deleteFolderList.length; i++) {
	            if (deleteFolderList[i].isFile()) {
	               deleteFolderList[i].delete();
	            } else {
	               deleteFile(deleteFolderList[i].getPath());
	            }
	            deleteFolderList[i].delete();
	         }
	         deleteFolder.delete();
	      }
	   }
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("org.apache.commons.net.ftp");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("file.FileDAO");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\r\n");
      out.write("서동학: 전체적인 코딩\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>업로드 액션</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   ");

   String userID = null;
   if (session.getAttribute("userID") != null) {
      userID = (String) session.getAttribute("userID");
   }
   
   
   // JSP 호스팅 연결 후 업로드
   String[] fileNameArr = new String[5];
   String[] fileRealNameArr = new String[5];
   String itemID = null;
   itemID = request.getParameter("id");
   
   String directory = "D:/JSP/upload/" + userID + "/" + itemID + "/"; //경로

   String savePath = directory.replace('\\', '/'); //구분자 리플레이스

   File targetDir = new File(savePath);
   // 경로에 저장할 폴더가 없으면 생성
   if (!targetDir.exists()) {
       targetDir.mkdirs();
   }

   // 업로드, 다운로드를 루트 폴더가 아니라 외부의 폴더로 지정해 취약점을 막는 방식의 코딩
   // 총 100메가 까지 저장 가능한 용량
   int maxSize = 1024 * 1024 * 100;
   String encoding = "UTF-8";

   MultipartRequest multipartRequest = new MultipartRequest(request, directory, maxSize, encoding, new DefaultFileRenamePolicy());
   
   // Enumeration for문처럼 사용한다
   Enumeration fileNames = multipartRequest.getFileNames();
   int i=0;
   while (fileNames.hasMoreElements()) {
      String parameter = (String) fileNames.nextElement();
      String fileName = multipartRequest.getOriginalFileName(parameter);
      String fileRealName = multipartRequest.getFilesystemName(parameter);
      fileNameArr[i] = fileName;
      fileRealNameArr[i] = fileRealName;
      int fileSize = request.getContentLength();
      
      if (fileName == null) continue;
      if(fileSize <= 0 || fileSize>maxSize){
         File file = new File(directory + fileRealName);
         file.delete();
         break;
      }
      // 여기 나오는 확장자는 정상적으로 업로드하고 그게 아니라면 삭제하는 코드
      else if (!fileName.endsWith(".zip") && !fileName.endsWith(".ZIP") 
         && !fileName.endsWith(".hwp") && !fileName.endsWith(".HWP") 
         && !fileName.endsWith(".jpg") && !fileName.endsWith(".JPG")
         && !fileName.endsWith(".png") && !fileName.endsWith(".PNG") 
         && !fileName.endsWith(".ppt") && !fileName.endsWith(".PPT") 
         && !fileName.endsWith(".pptx") && !fileName.endsWith(".PPTX")) {
         // 업로드 실패시
         File file = new File(directory + fileRealName);
         file.delete();
         break;
         //out.write("업로드할 수 없는 확장자입니다.<br>");
         //out.write("<input type='button' onclick='back()' value='돌아가기'>");
      } else {
         // 성공적으로 업로드한 경우
         //new FileDAO().upload(fileName, fileRealName, userID, itemID);
         //out.write("파일명 : " + fileName + "<br>");
         // out.write("실제 파일명 : " + fileRealName + "<br>");
      }
      i++;
      //System.out.println("while: " + fileRealName);
   }
   
   
    // FTP 연결 후 업로드
    FTPClient ftp = null;

	try {
		String FilePath="";
	    itemID = request.getParameter("id");
	    String ftpDirectory = "www/upload/" + userID + "/" + itemID + "/"; //경로
	    
	    savePath = ftpDirectory.replace('\\', '/'); //구분자 리플레이스
	
	    ftp = new FTPClient();
	    ftp.setControlEncoding("UTF-8");
	    ftp.connect("183.111.138.172");			// 접속할 ip
	    ftp.login("hjk709914", "tiger123*");	// 접속할 아이디, 비밀번호
	    ftp.enterLocalPassiveMode();
		
		boolean result = ftp.changeWorkingDirectory(savePath); 
		// 디렉토리 만드는 부분 
		if(!result) { 
			result = false; 
			String[] FTPdirectory = savePath.split("/"); 

			String newdir = "";
			int l=0;
			for(i=0, l=FTPdirectory.length; i<l; i++) { 
				newdir += ("/" + FTPdirectory[i]); 
				try { 
					result = ftp.changeWorkingDirectory(newdir); 
					if(!result) { 
						ftp.makeDirectory(newdir); 
						ftp.changeWorkingDirectory(newdir); 
					} 
				} catch (IOException e) { 
					throw e; 
				} 
			} 
		}


	    ftp.setFileType(FTPClient.BINARY_FILE_TYPE);	// 파일 깨짐 방지	   

	    // ftp 저장할 장소 (루트의 imgs 폴더)
	    ftp.changeWorkingDirectory(savePath);
	    
	   	// 저장할 파일 선택
	   	for(i=0; i<fileRealNameArr.length; i++) {
	   		if(fileRealNameArr[i] != null) {
	   			//System.out.println("FTP: " + fileRealNameArr[i]);
		   		File uploadFile = new File(directory + fileRealNameArr[i]);
			    FileInputStream fis = null;
				   
			    try {
			        fis = new FileInputStream(uploadFile);
			        
			        // ftp 서버에 파일을 저장한다. (저장한 이름, 파일)
			        boolean isSuccess = ftp.storeFile(uploadFile.getName(), fis);
			        if (isSuccess) {
			            System.out.println("Upload Success");
			            new FileDAO().upload(fileNameArr[i], fileRealNameArr[i], userID, itemID);
			            out.write("파일명 : " + fileNameArr[i] + "<br>");
			        }
			    } catch (IOException ex) {
			        System.out.println(ex.getMessage());
			    } finally {
			        if (fis != null) {
			            try {
			                fis.close();
			            } catch (IOException ex) {}
			        }
			    }
	   		}
	   	}
	} catch (SocketException e) {
	    System.out.println("Socket:" + e.getMessage());
	} catch (IOException e)	{
	    System.out.println("IO:" + e.getMessage());
	} finally {
	    if (ftp != null && ftp.isConnected()) {
	        try {
	        	ftp.logout();
	            ftp.disconnect();
	            deleteFile("D:/JSP/upload/"+userID);
	        } catch (IOException e) { 
	        	
	        }
	    }
	}
	
	
   
      out.write("\r\n");
      out.write("   <input type=\"button\" onclick=\"back()\" value=\"돌아가기\">\r\n");
      out.write("   <script>\r\n");
      out.write("      // 뒤로 돌아가는 함수\r\n");
      out.write("      function back() {\r\n");
      out.write("         location.href = document.referrer;\r\n");
      out.write("      }\r\n");
      out.write("   </script>\r\n");
      out.write("   \r\n");
      out.write("   	<!-- 탈퇴한 유저가 업로드한 파일과 폴더를 삭제하는 함수 -->\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
