/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.52
 * Generated at: 2022-05-13 14:59:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import file.FileDAO;
import java.io.File;
import java.io.PrintWriter;
import org.apache.commons.net.ftp.*;
import java.io.File;
import java.io.*;

public final class deleteFileAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


		public static void deleteFile(String path) {
			File deleteFolder = new File(path);
	
			if(deleteFolder.exists()){
				File[] deleteFolderList = deleteFolder.listFiles();
				
				for (int i = 0; i < deleteFolderList.length; i++) {
					if(deleteFolderList[i].isFile()) {
						deleteFolderList[i].delete();
					}else {
						deleteFile(deleteFolderList[i].getPath());
					}
					deleteFolderList[i].delete(); 
				}
				deleteFolder.delete();
			}
		}
	
    public static void removeDirectory(FTPClient ftpClient, String parentDir,
            String currentDir) throws IOException {
    	ftpClient.setControlEncoding("euc-kr");
        String dirToList = parentDir;
        if (!currentDir.equals("")) {
            dirToList += "/" + currentDir;
        }
 
        FTPFile[] subFiles = ftpClient.listFiles(dirToList);
 
        if (subFiles != null && subFiles.length > 0) {
            for (FTPFile aFile : subFiles) {
                String currentFileName = aFile.getName();
                if (currentFileName.equals(".") || currentFileName.equals("..")) {
                    // skip parent directory and the directory itself
                    continue;
                }
                String filePath = parentDir + "/" + currentDir + "/"
                        + currentFileName;
                if (currentDir.equals("")) {
                    filePath = parentDir + "/" + currentFileName;
                }
 
                if (aFile.isDirectory()) {
                    // remove the sub directory
                    removeDirectory(ftpClient, dirToList, currentFileName);
                } else {
                    // delete the file
                    boolean deleted = ftpClient.deleteFile(filePath);
                    if (deleted) {
                        System.out.println("DELETED the file: " + filePath);
                    } else {
                        System.out.println("CANNOT delete the file: "
                                + filePath);
                    }
                }
            }
 
            // finally, remove the directory itself
            boolean removed = ftpClient.removeDirectory(dirToList);
            if (removed) {
                System.out.println("REMOVED the directory: " + dirToList);
            } else {
                System.out.println("CANNOT remove the directory: " + dirToList);
            }
        }
    }
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("org.apache.commons.net.ftp");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("file.FileDAO");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!--\r\n");
      out.write("서동학: 전체적인 코딩\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 request.setCharacterEncoding("UTF-8"); 
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>파일 삭제</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	");

		String userID = null;
		if(session.getAttribute("userID") != null){
			userID = (String)session.getAttribute("userID");
		}
		String itemID = "";
		String action = request.getParameter("action");
		
		// 파일을 삭제하는 경우, 파일만을 삭제 폴더에 영향 없음
		if(action.equals("fileDelete")){
			//System.out.println("fileDelete");
			itemID = request.getParameter("itemID");
			//System.out.println(itemID);
			String fileRealName = request.getParameter("fileRealName");
			
			if(userID==null){
				PrintWriter script = response.getWriter();
				script.println("<script>");
				script.println("alert('로그인된 상태가 아닙니다.')");
				script.println("location.href = 'home.jsp'");
				script.println("</script>");
			}
			else {
				FileDAO fileDAO = new FileDAO();
				int result = fileDAO.delete(userID, itemID, fileRealName);
				if(result == -1) {
					PrintWriter script = response.getWriter();
					script.println("<script>");
					script.println("alert('실패했습니다.')");
					script.println("history.back()");
					script.println("</script>");
				}
				else {
					String path = "/www/upload/" + userID + "/" + itemID; // 변경이전 폴더 경로
					FTPClient ftp = null;
					try {
						ftp = new FTPClient();
						ftp.setControlEncoding("UTF-8"); 
						ftp.connect("183.111.138.172"); //"192.168.0.35"
						ftp.login("hjk709914", "tiger123*"); //"MeongDdi", "1234"
						ftp.enterLocalPassiveMode();
						
						ftp.changeWorkingDirectory(path);//파일 가져올 디렉터리 위치
						if(ftp.changeWorkingDirectory(path)) {
							System.out.println("FTP diretory set");
						}
						//ftp.setFileType(FTP.BINARY_FILE_TYPE);//파일 타입 설정 기본적으로 파일을 전송할떄는 BINARY타입을 사용합니다.
						
						int reply = ftp.getReplyCode();
					    if (!FTPReply.isPositiveCompletion(reply)) {
					    	ftp.disconnect();
					        System.out.println("FTP server refused connection.");
					    } else {
					    	System.out.println("FTP connected");
					        //System.out.print(ftpClient.getReplyString());
					    }

						//File f = new File("C:/Users/" + System.getProperty("user.name") + "/Downloads/" + request.getParameter("file"));//로컬에 다운받아 설정할 이름
						//System.out.println(f.getName());
						//FileOutputStream fos = null;
						try {
							ftp.deleteFile(fileRealName);
							//fos = new FileOutputStream(f);
							//boolean isSuccess = ftp.retrieveFile(request.getParameter("file"), fos);//ftp서버에 존재하는 해당명의 파일을 다운로드 하여 fos에 데이터를 넣습니다.
							/*if (isSuccess) {
								System.out.println("다운로드를 성공 하였습니다.");
							} else {
								System.out.println("다운로드 실패하여습니다.");
							}
							*/
						} catch (Exception e) {
							System.out.println(e.getMessage());
						} finally {
							
						}
						ftp.logout();
					} catch (Exception e) {
						System.out.println("Socket:" + e.getMessage());
					} finally {
						if (ftp != null && ftp.isConnected()) {
							try {
								ftp.disconnect();//ftp연결 끊기
					            PrintWriter script = response.getWriter();
								script.println("<script>");
								script.println("location.href = document.referrer;");
								script.println("</script>");
							} catch (IOException e) {
							}
						}
					}
					
					
					
					
					
					
					

					
					/*
					String fileDir = "upload/"+userID+"/"+itemID+"/"; //지울 파일이 존재하는 디렉토리
					String filePath = fileDir + fileRealName;
		
				    File file = new File(filePath); // 파일 객체생성
				    if(file.exists()) file.delete(); // 파일이 존재하면 파일을 삭제한다.
				    
				    fileDir = "upload/"+userID+"/"+itemID;
				    file = new File(fileDir);
				    if(file.isDirectory()) file.delete(); // 폴더가 비어있다면 삭제 delete()는 폴더나 파일을 삭제 단 폴더는 비어있어야 삭제
					*/
				}
			}
		}
		// 아이템을 삭제하여 아이템에 업로드된 파일과 폴더를 삭제하는 경우
		else if(action.equals("itemDelete")){
			System.out.println("itemDelete");
			itemID = request.getParameter("fileData");
			System.out.println(itemID);
			if(userID==null){
				PrintWriter script = response.getWriter();
				script.println("<script>");
				script.println("alert('로그인된 상태가 아닙니다.')");
				script.println("location.href = 'home.jsp'");
				script.println("</script>");
			}
			else {
				FileDAO fileDAO = new FileDAO();
				int result = fileDAO.deleteItem(userID, itemID);
				if(result == -1) {
					PrintWriter script = response.getWriter();
					script.println("<script>");
					script.println("alert('실패했습니다.')");
					script.println("history.back()");
					script.println("</script>");
				}
				else {
					String path = "/www/upload/" + userID; // 변경이전 폴더 경로
					FTPClient ftp = null;
					try {
						ftp = new FTPClient();
						ftp.setControlEncoding("UTF-8"); 
						ftp.connect("183.111.138.172"); //"192.168.0.35"
						ftp.login("hjk709914", "tiger123*"); //"MeongDdi", "1234"
						ftp.enterLocalPassiveMode();
						
						ftp.changeWorkingDirectory(path);//파일 가져올 디렉터리 위치
						if(ftp.changeWorkingDirectory(path)) {
							System.out.println("FTP diretory set");
						}
						//ftp.setFileType(FTP.BINARY_FILE_TYPE);//파일 타입 설정 기본적으로 파일을 전송할떄는 BINARY타입을 사용합니다.
						
						int reply = ftp.getReplyCode();
					    if (!FTPReply.isPositiveCompletion(reply)) {
					    	ftp.disconnect();
					        System.out.println("FTP server refused connection.");
					    } else {
					    	System.out.println("FTP connected");
					        //System.out.print(ftpClient.getReplyString());
					    }

						//File f = new File("C:/Users/" + System.getProperty("user.name") + "/Downloads/" + request.getParameter("file"));//로컬에 다운받아 설정할 이름
						//System.out.println(f.getName());
						//FileOutputStream fos = null;
						try {
							//ftp.removeDirectory(itemID);
							removeDirectory(ftp, path, itemID);
							
							//fos = new FileOutputStream(f);
							//boolean isSuccess = ftp.retrieveFile(request.getParameter("file"), fos);//ftp서버에 존재하는 해당명의 파일을 다운로드 하여 fos에 데이터를 넣습니다.
							/*if (isSuccess) {
								System.out.println("다운로드를 성공 하였습니다.");
							} else {
								System.out.println("다운로드 실패하여습니다.");
							}
							*/
						} catch (Exception e) {
							System.out.println(e.getMessage());
						} finally {
							
						}
						ftp.logout();
					} catch (Exception e) {
						System.out.println("Socket:" + e.getMessage());
					} finally {
						if (ftp != null && ftp.isConnected()) {
							try {
								ftp.disconnect();//ftp연결 끊기
					            PrintWriter script = response.getWriter();
								script.println("<script>");
								script.println("location.href = document.referrer;");
								script.println("</script>");
							} catch (IOException e) {
							}
						}
					}
					
					
					
					
					
					
					
					
					
					/*
					String path = "upload/"+userID+"/"+itemID; // 삭제할 폴더
					File deleteFolder = new File(path);
					deleteFile(path);
					PrintWriter script = response.getWriter();
					script.println("<script>");
					script.println("location.href = document.referrer;");
					script.println("</script>");
					*/
				}
			}
		}
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	<!-- 탈퇴한 유저가 업로드한 파일과 폴더를 삭제하는 함수 -->\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
